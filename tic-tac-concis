# Version concis en cours... mais version long terminer.
# coding: utf-8

from tkinter import * 
import random

fenetre = Tk()

label = Label(fenetre, text="Bienvenue dans le jeu deu morpion !", bg="black", font=("Helvetica", 24))
label.grid(row=0, column=0)

tailleCanva = 600
canvas = Canvas(fenetre, width=tailleCanva, height=tailleCanva, background="black")
canvas.grid(row=3, column=0)

case_signe = {}
cases = {}
trait = 0

def startGame():
    def choix(c):
        if(c == (0,) or c == (1,)):
            labelChoix.destroy()
            listChoix.destroy()
            bouttonChoix.destroy()
            frameModeDeJeu.destroy()
            play(c)
        else:
            label = Label(fenetre, text="Erreur, rentrez un chiffre entre 1 et 2")
            label.pack()
            
    frameModeDeJeu = Frame(fenetre)
    frameModeDeJeu.grid(row=3, column=0)
                
    labelChoix = Label(frameModeDeJeu, text="Choisissez votre mode de jeu : ", height=2)
    labelChoix.grid(row=0, column=0)

    listChoix = Listbox(frameModeDeJeu, height=2, width=25, justify="center", relief=GROOVE, font=("Arial", 15))
    listChoix.insert(1, "Jouer contre une IA")
    listChoix.insert(2, "Jouer contre votre ami en local")
    listChoix.grid(row=1, column=0)

    bouttonChoix = Button(frameModeDeJeu, text="Valider", command=lambda: choix(listChoix.curselection()))
    bouttonChoix.grid(row=2, column=0)

    listChoix.bind("<Return>", lambda event: choix(listChoix.curselection()))

startGame()

def play(choix):
    def rentrerSigne(value):
        
        print("non")
        nonlocal i
        nonlocal joueurTour
        global trait
        # Verification de l'entrer du joueur
        if value in ["1", "2", "3", "4", "5", "6", "7", "8", "9"]:
            value = int(value)
        else:
            labelErrorEnterNumber = Label(frameCommentaire, text="Entrez un chiffre entre 1 et 9", fg="red")
            labelErrorEnterNumber.grid(row=0, column=0)
            fenetre.after(3000, labelErrorEnterNumber.destroy)
            entry.delete(0, END)
            return
        
        print(f"1{i}")
        while True:   
            # Changer de joueur 1 fois sur 2
            if (i % 2 == 0):
                signe = "X"
                color = "blue"
            else:
                signe = "O"
                color = "red"
                
            i += 1
            
            print(f"2{i}")
            
            # Changer le texte pour joueur1/joueur2
            joueurTour.destroy()
            joueurTour = Label(frameJouer, text=f"Au tour du joueur {i%2 + 1} : ")
            joueurTour.grid(row=0, column=0)
            
            def ia(board, signe):
                labelChoix = Label(fenetre, text="Vous jouer contre une IA", background="red")
                labelChoix.grid(row=4, column=0)
                chiffreRandom = random.randint(1,9)
                while chiffreRandom in case_signe:
                    chiffreRandom = random.randint(1,9)                   
                nonlocal value
                value = chiffreRandom
            
            if choix == (0,) and signe == "O":
                ia(cases, signe)
            elif choix == (1,):
                pass
            
            print(f"3{i}")
            
            # Verifier si la case est vide
            if value in case_signe:
                labelError = Label(frameCommentaire, text=f"La case {value} est prise", fg="red")
                labelError.grid(row=1, column=0)
                fenetre.after(3000, labelError.destroy)
                entry.delete(0, END)
                return
            
            # Mettre le signe dans la case indiqu√© par l'utilisateur
            if(value == 9):
                cases["cases9"] = canvas.create_text(((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*5, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 8):
                cases["cases8"] = canvas.create_text(((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*5, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 7):
                cases["cases7"] = canvas.create_text(((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 6):
                cases["cases6"] = canvas.create_text(((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*3, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 5):
                cases["cases5"] = canvas.create_text(((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*3, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 4):
                cases["cases4"] = canvas.create_text(((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*3, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 3):
                cases["cases3"] = canvas.create_text(((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*1, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 2):
                cases["cases2"] = canvas.create_text(((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*1, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
            elif(value == 1):
                cases["cases1"] = canvas.create_text(((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, font=("Arial", 200), text=signe, fill=color)
                case_signe[value] = signe
                
            signe2 = ["X", "O"]
            combinaison_gagnante = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7], [2, 5, 8], [3, 6, 9], [1, 5, 9], [3, 5, 7]]
            adresse_gagnante = [[((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*1],
                                [((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*3],
                                [((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*5],
                                [((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5],
                                [((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*3, ((tailleCanva/3)/2)*5],
                                [((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*5],
                                [((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*5],
                                [((tailleCanva/3)/2)*5, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*1, ((tailleCanva/3)/2)*5]]
            
            nb = 0
            colorMsgGagnant = 0
            for z in combinaison_gagnante:
                if z[0] and z[1] and z[2] in case_signe:
                    for y in signe2:
                        if y == case_signe.get(z[0]) and y == case_signe.get(z[1]) and y == case_signe.get(z[2]):
                            if y == "X":
                                y = 1
                                colorMsgGagnant = "blue"
                            else:
                                y = 2
                                colorMsgGagnant = "red"
                            
                            # Afficher texte + trait pour le gagnant    
                            labelResultat = Label(frameCommentaire, text=f"Le joueur {y} a gagner !", font=("Helvitica", 30), bg=colorMsgGagnant)
                            labelResultat.grid(row=2, column=0)
                            trait = canvas.create_line(adresse_gagnante[nb][0], adresse_gagnante[nb][1], adresse_gagnante[nb][2], adresse_gagnante[nb][3])
                            
                            # Suprimmer tout (presque)
                            joueurTour.destroy()
                            entry.destroy()
                            boutton.destroy()
                            frameJouer.destroy()
                            fenetre.after(3000, frameCommentaire.destroy)
                            startGame()
                            return
                nb += 1
                
            print(f"4{i}")
            
            if choix == (1,) or i % 2 == 0:
                print(f"testetsttets")
                # Supprimer le texte dans l'input
                entry.delete(0, END)
                break
        
    i = 0
    global case_signe
    global cases
    global trait
    
    for case in cases:
        canvas.delete(cases[case])
    canvas.delete(trait)
        
    case_signe = {}
    cases = {}
    
    frameJouer = Frame(fenetre)
    frameJouer.grid(row=1, column=0)
    
    frameCommentaire = Frame(fenetre)
    frameCommentaire.grid(row=2, column=0)
    
    value = StringVar()
    entry = Entry(frameJouer, textvariable=value, width=5)
    entry.grid(row=0, column=1)
    
    joueurTour = Label(frameJouer, text=f"Au tour du joueur {i%2 + 1} : ")
    joueurTour.grid(row=0, column=0)
    
    boutton = Button(frameJouer, text="Valider", command=lambda: rentrerSigne(value.get()))
    boutton.grid(row=0, column=2)
    
    entry.bind("<Return>", lambda event: rentrerSigne(value.get()))

x1 = tailleCanva * 0.333
y1 = tailleCanva * 0.333
x2 = tailleCanva * 0.666
y2 = tailleCanva * 0.666
ligneX1 = canvas.create_line(x1, 0, x1, 800)
ligneX2 = canvas.create_line(x2, 0, x2, 800)
ligneY1 = canvas.create_line(0, y1, 800, y1)
ligneY2 = canvas.create_line(0, y2, 800, y2)

fenetre.mainloop()